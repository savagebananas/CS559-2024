#ifdef VS 
 
precision highp float;
attribute vec3 position;
attribute vec3 normal;
uniform mat3 normalMatrix;
uniform mat4 modelViewMatrix;
uniform mat4 projectionMatrix;
varying vec3 fNormal;
varying vec3 fPosition;
varying vec3 fObjNormal;

uniform float time;

const float pi=3.14159;
varying vec3 modelX;
varying vec3 modelN;
varying vec3 rawX;

void main()
{
  modelX = position;
  rawX = position;
  modelN = normal;  

  modelX.x += sin(modelX.z * time * 60.0) / 100.0;
  modelX.z += sin(modelX.x * time * 80.0) / 100.0;
  modelX.y += sin(modelX.z * time * 80.0) / 100.0;


  fNormal = normalize(normalMatrix * modelN);
  vec4 pos = modelViewMatrix * vec4(modelX, 1.0);
  fPosition = pos.xyz;
  gl_Position = projectionMatrix * pos;
  
  
}



 
#else 
 
precision highp float;
uniform float time;
uniform vec2 resolution;
varying vec3 fPosition;
varying vec3 fNormal;
varying vec3 modelX;
varying vec3 modelN;

const float specularCoeff  = 1.0;
const float specularExp    = 32.0;
const vec3  lightDirection = vec3(0.0,1.0,-0.5); 
const vec3  lightColor     = vec3(1.0,1.0,1.0);

float Posterize(float val, float steps) 
{ 
  return floor(val * steps)  / steps; 
}

void main()
{
  if (fNormal.z > 0.05 + sin(time * 5.0) * 1.25) discard;

  float theta = time*20.0;
  
  vec3 color1 = vec3(1, 0.8, 0);
  //vec3 color2 = vec3(.2, .4, .34);
  
  // lighting diffuse
  vec3 dir = vec3(0,1,0); // high noon
  vec3 diffuseColor = vec3(1,1,1);
  float diffuse = 0.85 + dot(fNormal, dir);
  
  // lighting specular
  vec3 l = normalize(lightDirection);
  vec3 n = normalize(fNormal);
  vec3 e = normalize(-fPosition);
  vec3 h = normalize (e+l);
  vec3 specularColor = specularCoeff * pow(max(0.0,dot(n,h)), specularExp) * lightColor;

  vec3 finalColor = color1 * diffuse + specularColor ;
  
  float step = 4.0;
  vec3 posterized = 
  vec3(Posterize(finalColor.r, step), Posterize(finalColor.g, step), Posterize(finalColor.b, step));
  
  gl_FragColor =  vec4(posterized, 1.0) ;

  
}
 
#endif